import {
  failedExecution,
  FailureResponse,
  generateExecutionId,
  markExecutionAsSuccessful,
  recordNewExecution,
} from "../../../lib/execution.js";
import { PromisePool } from "@supercharge/promise-pool";
import { bucketsClient } from "../../../lib/clients/buckets.js";
import { ErrorWithContext } from "../../../lib/errorWithContext.js";
import { FileFailedDetail } from "./types.js";
import { GetObjectCommand, PutObjectCommand } from "@stedi/sdk-client-buckets";
import { ediSplitter } from "./edi-splitter.js";
import config from "./configuration.js";
// Buckets client is shared across handler and execution tracking logic
const buckets = bucketsClient();

export const handler = async (event: {
  detail: FileFailedDetail;
}): Promise<{ count: number } | FailureResponse> => {
  console.log(JSON.stringify(event, null, 2));
  const executionId = generateExecutionId(event);

  if (
    event.detail.input.key.startsWith(config.configuration.target.keyPrefix)
  ) {
    console.log("skipping, do not process failured generated by split-loop");
    return failedExecution(
      executionId,
      new ErrorWithContext("detected failure from split-loop function", event)
    );
  }

  if (
    !event.detail.errors.find(
      (e) =>
        typeof e === "string" &&
        e.includes("Runtime exited with error: signal: killed")
    )
  ) {
    console.log("skipping, not a runtime timeout", event);
    return { count: 0 };
  }

  try {
    await recordNewExecution(executionId, event);

    const ediObject = await buckets.send(
      new GetObjectCommand(event.detail.input)
    );

    if (!ediObject.body) {
      throw new ErrorWithContext("Source object not found", event);
    }

    const ediString = await ediObject.body.transformToString();
    const splitEdi = ediSplitter(
      ediString,
      config.configuration.splitSegment,
      config.configuration.chunkSize,
      config.configuration.transactionSetId
    );

    const { errors } = await PromisePool.for(splitEdi)
      .withConcurrency(5)
      .process((chunk, index) => {
        return Promise.all([
          buckets.send(
            new PutObjectCommand({
              bucketName: config.configuration.target.bucketName,
              key: `${config.configuration.target.keyPrefix}${
                event.detail.input.key
              }-${index + 1}-${splitEdi.length}`,

              body: chunk,
            })
          ),
          new Promise((res) => setTimeout(res, 1_000)),
        ]);
      });

    if (errors.length) {
      throw new ErrorWithContext("failure to save split EDI files", {
        errors,
      });
    }

    await markExecutionAsSuccessful(executionId);

    return { count: splitEdi.length };
  } catch (e) {
    const error = ErrorWithContext.fromUnknown(e);

    return failedExecution(executionId, error);
  }
};
